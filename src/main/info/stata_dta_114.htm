<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Stata 14 help for dta_114</title>
<link rel="stylesheet" href="stata_dta_114_files/stylehelp.css" type="text/css">
<style>
h2 {
font-family: Arial,Helvetica,Helv,sans-serif;
color: #000000;
}
pre {
margin: 10;
}
</style>
</head>
<body topmargin="0" leftmargin="0" bgcolor="FDF4CD" marginheight="0" marginwidth="0">
<table background="stata_dta_114_files/filler_gradient.gif" border="0" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr><td align="left" valign="top" width="100%">
<img src="stata_dta_114_files/logo.gif" border="0">
</td></tr>
</tbody></table>
<p>
<table align="center" bgcolor="#FFFFFF" border="1" cellpadding="5" cellspacing="0">
<tbody><tr bgcolor="#FFFFFF"><td align="left" bgcolor="#FFFFFF" valign="top">
<!-- END HEAD -->
<h2>Stata 14 help for dta_114</h2>
<pre><p>
<b><u>Title</u></b>
</p><p>
    <b>[P] file formats .dta</b> -- Description of .dta file format 114
</p><p>
</p><p>
    <b>Warning:</b>  The entry below describes the contents of an old Stata <b>.dta</b>
    file format.  Newer versions of Stata continue to read, and perhaps to
    write, this old format.  What follows is the original help file for the
    <b>.dta</b> file format when it was the current file format.
</p><p>
</p><p>
<b><u>Technical note</u></b>
</p><p>
    Format 114 is identical to format 115 except for the version number.  The
    new number was introduced because of the new <b>%tb</b> <a href="http://www.stata.com/help.cgi?datetime_business_calendars">business date formats</a>.
    Older Statas would not know what to make of them.  Changing the version
    number from 114 to 115 prevented older Statas from reading datasets that
    might include <b>%tb</b> formats.
</p><p>
</p><p>
<a name="syntax"></a><b><u>Syntax</u></b>
</p><p>
    The information contained in this highly technical entry probably does
    not interest you.  We describe in detail the format of Stata <b>.dta</b>
    datasets for those interested in writing programs in C or other languages
    that read and write them.
</p><p>
</p><p>
<a name="remarks"></a><b><u>Remarks</u></b>
</p><p>
    Remarks are presented under the following headings:
</p><p>
        <a href="http://www.stata.com/help.cgi?dta_114#intro">1.  Introduction</a>
        <a href="http://www.stata.com/help.cgi?dta_114#versions">2.  Versions and flavors of Stata</a>
        <a href="http://www.stata.com/help.cgi?dta_114#strings">3.  Representation of strings</a>
        <a href="http://www.stata.com/help.cgi?dta_114#numbers">4   Representation of numbers</a>
        <a href="http://www.stata.com/help.cgi?dta_114#definition">5.  Dataset format definition</a>
            <a href="http://www.stata.com/help.cgi?dta_114#header">5.1  Header</a>
            <a href="http://www.stata.com/help.cgi?dta_114#descriptors">5.2  Descriptors</a>
            <a href="http://www.stata.com/help.cgi?dta_114#variable_labels">5.3  Variable labels</a>
            <a href="http://www.stata.com/help.cgi?dta_114#expansion_fields">5.4  Expansion fields</a>
            <a href="http://www.stata.com/help.cgi?dta_114#data">5.5  Data</a>
            <a href="http://www.stata.com/help.cgi?dta_114#value_labels">5.6  Value labels</a>
</p><p>
</p><p>
<a name="intro"></a><b><u>1.  Introduction</u></b>
</p><p>
    Stata-format datasets record data in a way generalized to work across
    computers that do not agree on how data are recorded.  Thus the same
    dataset may be used, without translation, on different computers
    (Windows, Unix, and Mac computers).  Given a computer, datasets are
    divided into two categories:  native-format and foreign-format datasets.
    Stata uses the following two rules:
</p><p>
        R1.  On any computer, Stata knows how to write only native-format
             datasets.
</p><p>
        R2.  On all computers, Stata can read foreign-format as well as
             native-format datasets.
</p><p>
    Rules R1 and R2 ensure that Stata users need not be concerned with
    dataset formats.  If you are writing a program to read and write Stata
    datasets, you will have to determine whether you want to follow the same
    rules or instead restrict your program to operate on only native-format
    datasets.  Because Stata follows rules R1 and R2, such a restriction
    would not be too limiting.  If the user had a foreign-format dataset, he
    or she could enter Stata, <a href="http://www.stata.com/help.cgi?use"><b>use</b></a> the data, and then <a href="http://www.stata.com/help.cgi?save"><b>save</b></a> it again.
</p><p>
</p><p>
<a name="versions"></a><b><u>2.  Versions and flavors of Stata</u></b>
</p><p>
    Stata is continually being updated, and these updates sometimes require
    changes be made to how Stata records <b>.dta</b> datasets.  This document
    documents what are known as <b>format-114</b> datasets, the most modern format.
    Stata itself can read older formats, but whenever it writes a dataset, it
    writes in <b>114</b> format.
</p><p>
    There are currently four flavors of Stata available:  Small Stata,
    <a href="http://www.stata.com/help.cgi?stataic">Stata/IC</a>, <a href="http://www.stata.com/help.cgi?SpecialEdition">Stata/SE</a>, and <a href="http://www.stata.com/help.cgi?statamp">Stata/MP</a>.  The same <b>114</b> format is used by all
    flavors.  The difference is that datasets can be larger in some flavors.
</p><p>
</p><p>
<a name="strings"></a><b><u>3.  Representation of strings</u></b>
</p><p>
    1.  Strings in Stata may be from 1 to 244 bytes long.
</p><p>
    2.  Stata records a string with a trailing binary 0 (<b>\0</b>) delimiter if the
        length of the string is less than the maximum declared length.  The
        string is recorded without the delimiter if the string is of the
        maximum length.
</p><p>
    3.  Leading and trailing blanks are significant.
</p><p>
    4.  Strings use ASCII encoding.
</p><p>
</p><p>
<a name="numbers"></a><b><u>4.  Representation of numbers</u></b>
</p><p>
    1.  Numbers are represented as 1-, 2-, and 4-byte integers and 4- and
        8-byte floats.  In the case of floats, ANSI/IEEE Standard 754-1985
        format is used.
</p><p>
    2.  Byte ordering varies across machines for all numeric types.  Bytes
        are ordered either least-significant to most-significant, dubbed
        LOHI, or most-significant to least-significant, dubbed HILO.
        Pentiums, for instance, use LOHI encoding.  Sun SPARC-based computers
        use HILO encoding.  Itanium-based computers are interesting in that
        they can be either LOHI or HILO depending on operating system.
        Windows and Linux on Itanium use LOHI encoding.  HP-UX on Itanium
        uses HILO encoding.
</p><p>
    3.  When reading a HILO number on a LOHI machine or a LOHI number on a
        HILO machine, perform the following before interpreting the number:
</p><p>
            byte          no translation necessary
            2-byte int    swap bytes 0 and 1
            4-byte int    swap bytes 0 and 3, 1 and 2
            4-byte float  swap bytes 0 and 3, 1 and 2
            8-byte float  swap bytes 0 and 7, 1 and 6, 2 and 5, 3 and 4
</p><p>
    4.  For purposes of written documentation, numbers are written with the
        most significant byte listed first.  Thus, <b>0x0001</b> refers to a 2-byte
        integer taking on the logical value 1 on all machines.
</p><p>
    5.  Stata has five numeric data types.  They are
</p><p>
            <b>byte</b>          1-byte signed int
            <b>int</b>           2-byte signed int
            <b>long</b>          4-byte signed int
            <b>float</b>         4-byte IEEE float
            <b>double</b>        8-byte IEEE float
</p><p>
    6.  Each type allows for 27 <a href="http://www.stata.com/help.cgi?missing">missing value codes</a>, known as <b>.</b>, <b>.a</b>, <b>.b</b>, ...,
        <b>.z</b>.  For each type, the range allowed for nonmissing values and the
        missing values codes are
</p><p>
            <b>byte</b>
                minimum nonmissing    -127   (0x80)
                maximum nonmissing    +100   (0x64)
                code for <b>.</b>            +101   (0x65)
                code for <b>.a</b>           +102   (0x66)
                code for <b>.b</b>           +103   (0x67)
                ...
                code for <b>.z</b>           +127   (0x7f)
</p><p>
            <b>int</b>
                minimum nonmissing    -32767 (0x8000)
                maximum nonmissing    +32740 (0x7fe4)
                code for <b>.</b>            +32741 (0x7fe5)
                code for <b>.a</b>           +32742 (0x7fe6)
                code for <b>.b</b>           +32743 (0x7fe7)
                ...
                code for <b>.z</b>           +32767 (0x7fff)
</p><p>
            <b>long</b>
                minimum nonmissing    -2,147,483,647  (0x80000000)
                maximum nonmissing    +2,147,483,620  (0x7fffffe4)
                code for <b>.</b>            +2,147,483,621  (0x7fffffe5)
                code for <b>.a</b>           +2,147,483,622  (0x7fffffe6)
                code for <b>.b</b>           +2,147,483,623  (0x7fffffe7)
                ...
                code for <b>.z</b>           +2,147,483,647  (0x7fffffff)
</p><p>
            <b>float</b>
                minimum nonmissing    -1.701e+38  (-1.fffffeX+7e)  <i>(sic)</i>
                maximum nonmissing    +1.701e+38  (+1.fffffeX+7e)
                code for <b>.</b>                        (+1.000000X+7f)
                code for <b>.a</b>                       (+1.001000X+7f)
                code for <b>.b</b>                       (+1.002000X+7f)
                ...
                code for <b>.z</b>                       (+1.01a000X+7f)
</p><p>
            <b>double</b>
                minimum nonmissing    -1.798e+308 (-1.fffffffffffffX+3ff)
                maximum nonmissing    +8.988e+307 (+1.fffffffffffffX+3fe)
                code for <b>.</b>                        (+1.0000000000000X+3ff)
                code for <b>.a</b>                       (+1.0010000000000X+3ff)
                code for <b>.b</b>                       (+1.0020000000000X+3ff)
                ...
                code for <b>.z</b>                       (+1.01a0000000000X+3ff)
</p><p>
        Note that for <b>float</b>, all <i>z</i>&gt;1.fffffeX+7e, and for <b>double</b>, all
        <i>z</i>&gt;1.fffffffffffffX+3fe are considered to be missing values and it is
        merely a subset of the values that are labeled <b>.</b>, <b>.a</b>, <b>.b</b>, ..., <b>.z</b>.
        For example, a value between <b>.a</b> and <b>.b</b> is still considered to be
        missing and, in particular, all the values between <b>.a</b> and <b>.b</b> are
        known jointly as <b>.a_</b>.  Nevertheless, the recording of those values
        should be avoided.
</p><p>
        In the table above, we have used the {<b>+</b>|<b>-</b>}<b>1.</b><i>&lt;digits&gt;</i><b>X</b>{<b>+</b>|<b>-</b>}<i>&lt;digits&gt;</i>
        notation.  The number to the left of the <b>X</b> is to be interpreted as a
        base-16 number (the period is thus the base-16 point) and the number
        to the right (also recorded in base 16) is to be interpreted as the
        power of 2 <i>(sic)</i>.  For example,
</p><p>
            1.01aX+3ff = (1.01a) * 2^(3ff)                        (base 16)
                       = (1 + 0/16 + 1/16^2 + 10/16^3) * 2^1023   (base 10)
</p><p>
        The {<b>+</b>|<b>-</b>}<b>1.</b><i>&lt;digits&gt;</i><b>X</b>{<b>+</b>|<b>-</b>}<i>&lt;digits&gt;</i> notation easily converts to IEEE
        8-byte double:  the <b>1</b> is the hidden bit, the digits to the right of
        the hexadecimal point are the mantissa bits, and the exponent is the
        IEEE exponent in signed (removal of offset) form.  For instance, pi =
        3.1415927... is
</p><p>
                                            8-byte IEEE, HILO
                                         -----------------------
            pi = +1.921fb54442d18X+001 = 40 09 21 fb 54 44 2d 18
</p><p>
                                       = 18 2d 44 54 fb 21 09 40
                                         -----------------------
                                            8-byte IEEE, LOHI
</p><p>
        Converting {<b>+</b>|<b>-</b>}<b>1.</b><i>&lt;digits&gt;</i><b>X</b>{<b>+</b>|<b>-</b>}<i>&lt;digits&gt;</i> to IEEE 4-byte float is more
        difficult, but the same rule applies:  the <b>1</b> is the hidden bit, the
        digits to the right of the hexadecimal point are the mantissa bits,
        and the exponent is the IEEE exponent in signed (removal of offset)
        form.  What makes it more difficult is that the sign-and-exponent in
        the IEEE 4-byte format occupy 9 bits, which is not divisible by four,
        and so everything is shifted one bit.  In float:
</p><p>
                                      4-byte IEEE, HILO
                                         -----------
            pi = +1.921fb60000000X+001 = 40 49 0f db
</p><p>
                                       = db of 49 40
                                         -----------
                                      4-byte IEEE, LOHI
</p><p>
        The easiest way to obtain the above result is to first convert
        +1.921fb60000000X+001 to an 8-byte double and then convert the 8-byte
        double to a 4-byte float.
</p><p>
        In any case, the relevant numbers are
</p><p>
            V            value                HILO             LOHI
            ---------------------------------------------------------------
            m    -1.fffffffffffffX+3ff   ffefffffffffffff  ffffffffffffefff
            M    +1.fffffffffffffX+3fe   7fdfffffffffffff  ffffffffffffdf7f
            <b>.</b>    +1.0000000000000X+3ff   7fe0000000000000  000000000000e07f
            <b>.a</b>   +1.0010000000000X+3ff   7fe0010000000000  000000000001e07f
            <b>.b</b>   +1.0020000000000X+3ff   7fe0020000000000  000000000002e07f
            <b>.z</b>   +1.01a0000000000X+3ff   7fe01a0000000000  00000000001ae07f
</p><p>
            m    -1.fffffeX+7e           feffffff          fffffffe
            M    +1.fffffeX+7e           7effffff          ffffff7e
            <b>.</b>    +1.000000X+7f           7f000000          0000007f
            <b>.a</b>   +1.001000X+7f           7f000800          0008007f
            <b>.b</b>   +1.002000X+7f           7f001000          0010007f
            <b>.z</b>   +1.01a000X+7f           7f00d000          00d0007f
            ---------------------------------------------------------------
</p><p>
</p><p>
<a name="definition"></a><b><u>5.  Dataset format definition</u></b>
</p><p>
    Stata-format datasets contain five components, which are, in order,
</p><p>
        1.  Header
        2.  Descriptors
        3.  Variable Labels
        4.  Expansion Fields
        5.  Data
        6.  Value Labels
</p><p>
</p><p>
<a name="header"></a><b><u>5.1  Header</u></b>
</p><p>
    The Header is defined as
</p><p>
        Contents            Length    Format    Comments
        -----------------------------------------------------------------------
        <b>ds_format</b>                1    byte      contains 114 = 0x72
        <b>byteorder</b>                1    byte      0x01 -&gt; HILO, 0x02 -&gt; LOHI
        <b>filetype</b>                 1    byte      0x01
        unused                   1    byte      0x00
        <b>nvar</b> (number of vars)    2    int       encoded per <b>byteorder</b>
        <b>nobs</b> (number of obs)     4    int       encoded per <b>byteorder</b>
        <b>data_label</b>              81    char      dataset label, \0 terminated
        <b>time_stamp</b>              18    char      date/time saved, \0 terminated
        -----------------------------------------------------------------------
        Total                  109
</p><p>
</p><p>
    <b>time_stamp[17]</b> must be set to binary zero.  When writing a dataset, you
    may record the time stamp as blank <b>time_stamp[0]</b>=\0), but you must still
    set <b>time_stamp[17]</b> to binary zero as well.  If you choose to write a time
    stamp, its format is
</p><p>
        <i>dd Mon yyyy hh</i><b>:</b><i>mm</i>
</p><p>
    <i>dd</i> and <i>hh</i> may be written with or without leading zeros, but if leading
    zeros are suppressed, a blank must be substituted in their place.
</p><p>
</p><p>
<a name="descriptors"></a><b><u>5.2  Descriptors</u></b>
</p><p>
    The Descriptors are defined as
</p><p>
        Contents            Length    Format       Comments
        -----------------------------------------------------------------------
        <b>typlist</b>               <b>nvar</b>    byte array
        <b>varlist</b>            33*<b>nvar</b>    char array
        <b>srtlist</b>          2*(<b>nvar</b>+1)   int array    encoded per <b>byteorder</b>
        <b>fmtlist</b>            49*<b>nvar</b>    char array
        <b>lbllist</b>            33*<b>nvar</b>    char array
        -----------------------------------------------------------------------
</p><p>
</p><p>
    <b>typlist</b> stores the type of each variable, 1, ..., nvar.  The types are
    encoded:
</p><p>
                type          code
                --------------------
                <b>str1</b>        1 = 0x01
                <b>str2</b>        2 = 0x02
                ...
                <b>str244</b>    244 = 0xf4
                <b>byte</b>      251 = 0xfb  <i>(sic)</i>
                <b>int</b>       252 = 0xfc
                <b>long</b>      253 = 0xfd
                <b>float</b>     254 = 0xfe
                <b>double</b>    255 = 0xff
                --------------------
</p><p>
    Stata stores five numeric types:  <b>double</b>, <b>float</b>, <b>long</b>, <b>int</b>, and <b>byte</b>.  If
    <b>nvar</b>==4, a <b>typlist</b> of 0xfcfffdfe indicates that variable 1 is an <b>int</b>,
    variable 2 a <b>double</b>, variable 3 a <b>long</b>, and variable 4 a <b>float</b>.  Types
    above 0x01 through 0xf4 are used to represent strings.  For example, a
    string with maximum length 8 would have type <b>0x08</b>.  If <b>typlist</b> is read
    into the C-array <b>char</b> <b>typlist[]</b>, then <b>typlist[i-1]</b> indicates the type of
    variable <b>i</b>.
</p><p>
    <b>varlist</b> contains the names of the Stata variables 1, ..., <b>nvar</b>, each up
    to 32 characters in length, and each terminated by a binary zero (\0).
    For instance, if <b>nvar</b>==4,
</p><p>
        0       33        66          99
        |        |         |           |
        <b>vbl1\0...myvar\0...thisvar\0...lstvar\0...</b>
</p><p>
</p><p>
    would indicate that variable 1 is named <b>vbl1</b>, variable 2 <b>myvar</b>, variable
    3 <b>thisvar</b>, and variable 4 <b>lstvar</b>.  The byte positions indicated by
    periods will contain random numbers (and note that we have omitted some
    of the periods).  If <b>varlist</b> is read into the C-array <b>char</b> <b>varlist[]</b>,
    then <b>&amp;varlist[(i-1)*33]</b> points to the name of the <b>i</b>th variable.
</p><p>
    <b>srtlist</b> specifies the sort-order of the dataset and is terminated by an
    (int) 0.  Each 2 bytes is 1 int and contains either a variable number or
    zero.  The zero marks the end of the <b>srtlist</b>, and the array positions
    after that contain random junk.  For instance, if the data are not
    sorted, the first int will contain a zero and the ints thereafter will
    contain junk.  If <b>nvar</b>==4, the record will appear as
</p><p>
        <b>0000................</b>
</p><p>
    If the dataset is sorted by one variable <b>myvar</b> and if that variable is
    the second variable in the <b>varlist</b>, the record will appear as
</p><p>
        <b>00020000............</b>  (if <b>byteorder</b>==HILO)
        <b>02000000............</b>  (if <b>byteorder</b>==LOHI)
</p><p>
    If the dataset is sorted by <b>myvar</b> and within <b>myvar</b> by <b>vbl1</b>, and if <b>vbl1</b>
    is the first variable in the dataset, the record will appear as
</p><p>
        <b>000200010000........</b>  (if <b>byteorder</b>==HILO)
        <b>020001000000........</b>  (if <b>byteorder</b>==LOHI)
</p><p>
</p><p>
    If <b>srtlist</b> were read into the C-array <b>short</b> <b>int</b> <b>srtlist[]</b>, then
    <b>srtlist[0]</b> would be the number of the first sort variable or, if the data
    were not sorted, 0.  If the number is not zero, <b>srtlist[1]</b> would be the
    number of the second sort variable or, if there is not a second sort
    variable, 0, and so on.
</p><p>
    <b>fmtlist</b> contains the formats of the variables 1, ..., <b>nvar</b>.  Each format
    is 49 bytes long and includes a binary zero end-of-string marker.  For
    instance,
</p><p>
        <b>%9.0f\0..........................................%8.2f\0......</b>
        <b>....................................%20.0g\0..................</b>
        <b>.......................%td\0..................................</b>
        <b>..........%tcDDmonCCYY_HH:MM:SS.sss\0......................</b>
</p><p>
    indicates that variable 1 has a <b>%9.0f</b> format, variable 2 a <b>%8.2f</b> format,
    variable 3 a <b>%20.0g</b> format, and so on.  Note that these are Stata
    formats, not C formats.
</p><p>
        1.  Formats beginning with <b>%t</b> or <b>%-t</b> are Stata's date and time
            formats.
</p><p>
        2.  Stata has an old <b>%d</b> format notation and some datasets still have
            them.  Format <b>%d</b>... is equivalent to modern format <b>%td</b>... and
            <b>%-d</b>... is equivalent to <b>%-td</b>...
</p><p>
        3.  Nondate formats ending in <b>gc</b> or <b>fc</b> are similar to C's <b>g</b> and <b>f</b>
            formats, but with commas.  Most translation routines would ignore
            the ending <b>c</b> (change it to <b>\0</b>).
</p><p>
        4.  Formats may contain commas rather than period, such as <b>%9,2f</b>,
            indicating European format.
</p><p>
    If <b>fmtlist</b> is read into the C-array <b>char</b> <b>fmtlist[]</b>, then
    <b>&amp;fmtlist[49*(i-1)]</b> refers to the starting address of the format for the
    <b>i</b>th variable.
</p><p>
    <b>lbllist</b> contains the names of the value formats associated with the
    variables 1, ..., <b>nvar</b>.  Each value-format name is 33 bytes long and
    includes a binary zero end-of-string marker.  For instance,
</p><p>
        0   33        66   99
        |    |         |    |
        <b>\0...yesno\0...\0...yesno\0...</b>
</p><p>
    indicates that variables 1 and 3 have no value label associated with
    them, whereas variables 2 and 4 are both associated with the value label
    named <b>yesno</b>.  If <b>lbllist</b> is read into the C-array <b>char</b> <b>lbllist[]</b>, then
    <b>&amp;lbllist[33*(i-1)]</b> points to the start of the label name associated with
    the <b>i</b>th variable.
</p><p>
</p><p>
<a name="variable_labels"></a><b><u>5.3  Variable labels</u></b>
</p><p>
    The Variable Labels are recorded as
</p><p>
        Contents            Length    Format     Comments
        ------------------------------------------------------
        Variable 1's label      81    char       \0 terminated
        Variable 2's label      81    char       \0 terminated
        ...
        Variable <b>nvar</b>'s label   81    char       \0 terminated
        ------------------------------------------------------
        Total              81*<b>nvar</b>
</p><p>
    If a variable has no label, the first character of its label is \0.
</p><p>
</p><p>
<a name="expansion_fields"></a><b><u>5.4  Expansion fields</u></b>
</p><p>
    The Expansion Fields are recorded as
</p><p>
        Contents            Length    Format     Comments
        --------------------------------------------------------------------
        data type                1    byte       coded, only 0 and 1 defined
        len                      4    int        encoded per <b>byteorder</b>
        contents               len    varies
</p><p>
        data type                1    byte       coded, only 0 and 1 defined
        len                      4    int        encoded per <b>byteorder</b>
        contents               len    varies
</p><p>
        data type                1    byte       code 0 means end
        len                      4    int        0 means end
        --------------------------------------------------------------------
</p><p>
    Expansion fields conclude with code 0 and len 0; before the termination
    marker, there may be no or many separate data blocks.  Expansion fields
    are used to record information that is unique to Stata and has no
    equivalent in other data management packages.  Expansion fields are
    always optional when writing data and, generally, programs reading Stata
    datasets will want to ignore the expansion fields.  The format makes this
    easy.  When writing, write 5 bytes of zeros for this field.  When
    reading, read five bytes; the last four bytes now tell you the size of
    the next read, which you discard.  You then continue like this until you
    read 5 bytes of zeros.
</p><p>
    The only expansion fields currently defined are type 1 records for
    variable's <a href="http://www.stata.com/help.cgi?char">characteristics</a>.  The design, however, allows new types of
    expansion fields to be included in subsequent releases of Stata without
    changes in the data format because unknown expansion types can simply be
    skipped.
</p><p>
    For those who care, the format of type 1 records is a binary-zero
    terminated variable name in bytes 0-32, a binary-zero terminated
    characteristic name in bytes 33-65, and a binary-zero terminated string
    defining the contents in bytes 66 through the end of the record.
</p><p>
</p><p>
<a name="data"></a><b><u>5.5  Data</u></b>
</p><p>
    The Data are recorded as
</p><p>
        Contents                  Length         Format
        -----------------------------------------------
        obs 1, var 1         per <b>typlist</b>    per <b>typlist</b>
        obs 1, var 2         per <b>typlist</b>    per <b>typlist</b>
        ...
        obs 1, var <b>nvar</b>      per <b>typlist</b>    per <b>typlist</b>
</p><p>
        obs 2, var 1         per <b>typlist</b>    per <b>typlist</b>
        obs 2, var 2         per <b>typlist</b>    per <b>typlist</b>
        ...
        obs 2, var <b>nvar</b>      per <b>typlist</b>    per <b>typlist</b>
        .
        .
        obs <b>nobs</b>, var 1      per <b>typlist</b>    per <b>typlist</b>
        obs <b>nobs</b>, var 2      per <b>typlist</b>    per <b>typlist</b>
        ...
        obs <b>nobs</b>, var <b>nvar</b>   per <b>typlist</b>    per <b>typlist</b>
        -----------------------------------------------
</p><p>
    The data are written as all the variables on the first observation,
    followed by all the data on the second observation, and so on.  Each
    variable is written in its own internal format, as given in <b>typlist</b>.  All
    values are written per <b>byteorder</b>.  Strings are null terminated if they
    are shorter than the allowed space, but they are not terminated if they
    occupy the full width.
</p><p>
    End-of-file may occur at this point.  If it does, there are no value
    labels to be read.  End-of-file may similarly occur between value labels.
    On end-of-file, all data have been processed.
</p><p>
</p><p>
<a name="value_labels"></a><b><u>5.6  Value labels</u></b>
</p><p>
    If there are no value labels, end-of-file will have occurred while
    reading the data.  If there are value labels, each value label is written
    as
</p><p>
        Contents               len   format     comment
        -------------------------------------------------------------------
        <b>len</b>                      4   int        length of <b>value_label_table</b>
        <b>labname</b>                 33   char       \0 terminated
        padding                  3
        <b>value_label_table</b>      <b>len</b>              see next table
        -------------------------------------------------------------------
</p><p>
    and this is repeated for each value label included in the file.  The
    format of the <b>value_label_table</b> is
</p><p>
        Contents               len   format     comment
        ----------------------------------------------------------
        <b>n</b>                        4   int        number of entries
        <b>txtlen</b>                   4   int        length of <b>txt[]</b>
        <b>off[]</b>                  4*<b>n</b>   int array  <b>txt[]</b> offset table
        <b>val[]</b>                  4*<b>n</b>   int array  sorted value table
        <b>txt[]</b>               <b>txtlen</b>   char       text table
        ----------------------------------------------------------
</p><p>
    <b>len</b>, <b>n</b>, <b>txtlen</b>, <b>off[]</b>, and <b>val[]</b> are encoded per <b>byteorder</b>.  The maximum
    length of <b>txt[]</b> for a label is 32,000 characters.  Stata is robust to
    datasets which might contain labels longer than this; labels which exceed
    the limit, if any, will be dropped during a <a href="http://www.stata.com/help.cgi?use"><b>use</b></a>.
</p><p>
    For example, the <b>value_label_table</b> for 1&lt;-&gt;yes and 2&lt;-&gt;no, shown in HILO
    format, would be
</p><p>
        byte position:  00 01 02 03   04 05 06 07   08 09 10 11   12 13 14 15
             contents:  00 00 00 02   00 00 00 07   00 00 00 00   00 00 00 04
              meaning:        n = 2    txtlen = 7    off[0] = 0    off[1] = 4
</p><p>
        byte position:  16 17 18 19   20 21 22 23   24 25 26 27 28 29 30
             contents:  00 00 00 01   00 00 00 02    y  e  s 00  n  o 00
              meaning:   val[0] = 1    val[1] = 2    txt ---&gt;
</p><p>
    The interpretation is that there are <b>n</b>=2 values being mapped.  The values
    being mapped are <b>val[0]</b>=1 and <b>val[1]</b>=2.  The corresponding text for
    <b>val[0]</b> would be at <b>off[0]</b>=0 (and so be "<b>yes</b>") and for <b>val[1]</b> would be at
    <b>off[1]</b>=4 (and so be "<b>no</b>").
</p><p>
    Interpreting this table in C is not as daunting as it appears.  Let <b>(char</b>
    <b>*) p</b> refer to the memory area into which <b>value_label_table</b> is read.
    Assume your compiler uses 4-byte <b>int</b>s.  The following manifests make
    interpreting the table easier:
</p><p>
        <b>#define SZInt               4</b>
<b>        #define Off_n               0</b>
<b>        #define Off_nxtoff          SZInt</b>
<b>        #define Off_off             (SZInt+SZInt)</b>
<b>        #define Off_val(n)          (SZInt+SZInt+n*SZInt)</b>
<b>        #define Off_txt(n)          (Off_val(n) + n*SZInt)</b>
<b>        #define Len_table(n,nxtoff) (Off_txt(n) + nxtoff)</b>
</p><p>
<b>        #define Ptr_n(p)            ( (int *) ( ((char *) p) + Off_n ) )</b>
<b>        #define Ptr_nxtoff(p)       ( (int *) ( ((char *) p) + Off_nxtoff ) )</b>
<b>        #define Ptr_off(p)          ( (int *) ( ((char *) p) + Off_off ) )</b>
<b>        #define Ptr_val(p,n)        ( (int *) ( ((char *) p) + Off_val(n) ) )</b>
<b>        #define Ptr_txt(p,n)        ( (char *) ( ((char *) p) + Off_txt(n) ) )</b>
</p><p>
    It is now the case that <b>for(i=0; i &lt; *Ptr_n(p); i++)</b>, the value
    <b>*Ptr_val(p,i)</b> is mapped to the character string <b>Ptr_txt(p,i)</b>.
</p><p>
    Remember in allocating memory for <b>*p</b> that the table can be big.  The
    limits are <b>n</b>=65,536 mapped values with each value being up to 81
    characters long (including the null terminating byte).  Such a table
    would be 5,823,712 bytes long.  No user is likely to approach that limit
    and, in any case, after reading the 8 bytes preceding the table (<b>n</b> and
    <b>txtlen</b>), you can calculate the remaining length as 2*4*<b>n</b>+<b>txtlen</b> and
    <b>malloc()</b> the exact amount.
</p><p>
    Constructing the table is more difficult.  The easiest approach is to set
    arbitrary limits equal to or smaller than Stata's as to the maximum
    number of entries and total text length you will allow and simply declare
    the three pieces <b>off[]</b>, <b>val[]</b>, and <b>txt[]</b> according to those limits:
</p><p>
        <b>int off[MaxValueForN] ;</b>
<b>        int val[MaxValueForN] ;</b>
<b>        char txt[MaxValueForTxtlen] ;</b>
</p><p>
    Stata's internal code follows a more complicated strategy of always
    keeping the table in compressed form and having a routine that will "add
    one position" in the table.  This is slower but keeps memory requirements
    to be no more than the actual size of the table.
</p><p>
    In any case, when adding new entries to the table, remember that <b>val[]</b>
    must be in ascending order:  <b>val[0]</b> &lt; <b>val[1]</b> &lt; ... &lt; <b>val[n]</b>.
</p><p>
    It is not required that <b>off[]</b> or <b>txt[]</b> be kept in ascending order.  We
    previously offered the example of the table that mapped 1&lt;-&gt;yes and
    2&lt;-&gt;no:
</p><p>
        byte position:  00 01 02 03   04 05 06 07   08 09 10 11   12 13 14 15
             contents:  00 00 00 02   00 00 00 07   00 00 00 00   00 00 00 04
              meaning:        n = 2    txtlen = 7    off[0] = 0    off[1] = 4
</p><p>
        byte position:  16 17 18 19   20 21 22 23   24 25 26 27 28 29 30
             contents:  00 00 00 01   00 00 00 02    y  e  s 00  n  o 00
              meaning:   val[0] = 1    val[1] = 2    txt ---&gt;
</p><p>
    This table could just as well be recorded as
</p><p>
        byte position:  00 01 02 03   04 05 06 07   08 09 10 11   12 13 14 15
             contents:  00 00 00 02   00 00 00 07   00 00 00 03   00 00 00 00
              meaning:        n = 2    txtlen = 7    off[0] = 3    off[1] = 0
</p><p>
        byte position:  16 17 18 19   20 21 22 23   24 25 26 27 28 29 30
             contents:  00 00 00 01   00 00 00 02    n  o 00  y  e  s 00
              meaning:   val[0] = 1    val[1] = 2    txt ---&gt;
</p><p>
    but it could not be recorded as
</p><p>
        byte position:  00 01 02 03   04 05 06 07   08 09 10 11   12 13 14 15
             contents:  00 00 00 02   00 00 00 07   00 00 00 04   00 00 00 00
              meaning:        n = 2    txtlen = 7    off[0] = 4    off[1] = 0
</p><p>
        byte position:  16 17 18 19   20 21 22 23   24 25 26 27 28 29 30
             contents:  00 00 00 02   00 00 00 01    y  e  s 00  n  o 00
              meaning:   val[0] = 2    val[1] = 1    txt ---&gt;
</p><p>
    It is not the out-of-order values of <b>off[]</b> that cause problems; it is
    out-of-order values of <b>val[]</b>.  In terms of table construction, we find it
    easier to keep the table sorted as it grows.  This way one can use a
    binary search routine to find the appropriate position in <b>val[]</b> quickly.
</p><p>
    The following routine will find the appropriate slot.  It uses the
    manifests we previously defined and thus it assumes the table is in
    compressed form, but that is not important.  Changing the definitions of
    the manifests to point to separate areas would be easy enough.
</p><p>
        <b>/*</b>
<b>            slot = vlfindval(char *baseptr, int val)</b>
</p><p>
<b>            Looks for value val in label at baseptr.</b>
<b>                If found:</b>
<b>                        returns slot number:  0, 1, 2, ...</b>
<b>                If not found:</b>
<b>                        returns k&lt;0 such that val would go in slot -(k+1)</b>
<b>                                k== -1        would go in slot 0.</b>
<b>                                k== -2        would go in slot 1.</b>
<b>                                k== -3        would go in slot 2.</b>
<b>        */</b>
</p><p>
<b>        int vlfindval(char *baseptr, int myval)</b>
<b>        {</b>
<b>                int     n ;</b>
<b>                int     lb, ub, try ;</b>
<b>                int     *val ;</b>
<b>                char    *txt ;</b>
<b>                int     *off ;</b>
<b>                int     curval ;</b>
</p><p>
<b>                n   = *Ptr_n(baseptr) ;</b>
<b>                val =  Ptr_val(baseptr, n) ;</b>
</p><p>
<b>                if (n==0) return(-1) ;  /* not found, insert into 0 */</b>
</p><p>
<b>                                        /* in what follows,                */</b>
<b>                                        /* we know result between [lb,ub   */</b>
<b>                                        /* or it is not in the table       */</b>
<b>                lb = 0 ;</b>
<b>                ub = n - 1 ;</b>
<b>                while (1) {</b>
<b>                        try = (lb + ub) / 2 ;</b>
<b>                        curval = val[try] ;</b>
<b>                        if (myval == curval) return(try) ;</b>
<b>                        if (myval&lt;curval) {</b>
<b>                                ub = try - 1 ;</b>
<b>                                if (ub&lt;lb) return(-(try+1)) ;</b>
<b>                                /* because want to insert before try, ergo,</b>
<b>                                want to return try, and transform is -(W+1). */</b>
<b>                        }</b>
<b>                        else /* myval&gt;curval */ {</b>
<b>                                lb = try + 1 ;</b>
<b>                                if (ub&lt;lb) return(-(lb+1)) ;</b>
<b>                                /* because want to insert after try, ergo,</b>
<b>                                want to return try+1 and transform is -(W+1) */</b>
<b>                        }</b>
<b>                }</b>
<b>                /*NOTREACHED*/</b>
<b>        }</b>
</p><p>
    For earlier documentation, see <a href="http://www.stata.com/help.cgi?dta_113">dta_113</a>.
</p><p>
</p></pre><!-- BEGIN FOOT -->
</td></tr></tbody></table>
</p><hr>
<table bgcolor="#ffffff" border="0" cellpadding="2" cellspacing="0" width="100%">
<tbody><tr>
<td align="center" valign="top">
<font face="arial,helvetica,helv,sans-serif" size="1">
© <a href="http://www.stata.com/copyright/" class="bodylink">Copyright</a> 1996–2015 StataCorp LP
&nbsp;&nbsp;|&nbsp;&nbsp;
<a href="http://www.stata.com/terms-of-use/" class="bodylink">Terms of use</a>
&nbsp;&nbsp;|&nbsp;&nbsp;
<a href="http://www.stata.com/privacy-policy/" class="bodylink">Privacy</a>
&nbsp;&nbsp;|&nbsp;&nbsp;
<a href="http://www.stata.com/company/contact/" class="bodylink">Contact us</a>
&nbsp;&nbsp;|&nbsp;&nbsp;
<a href="http://www.stata.com/news/whats-new/" class="bodylink">What's new</a>
&nbsp;&nbsp;|&nbsp;&nbsp;
<a href="http://www.stata.com/site-index/" class="bodylink">Site index</a>
</font>
</td>
		</tr>
		</tbody></table>



</body></html>